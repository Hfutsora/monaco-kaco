// Generated from src/parser/kaco.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class kacoLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly OpenBracket = 2;
	public static readonly CloseBracket = 3;
	public static readonly OpenParen = 4;
	public static readonly CloseParen = 5;
	public static readonly OpenBrace = 6;
	public static readonly CloseBrace = 7;
	public static readonly SemiColon = 8;
	public static readonly Comma = 9;
	public static readonly Plus = 10;
	public static readonly Minus = 11;
	public static readonly Multiply = 12;
	public static readonly Divide = 13;
	public static readonly Assign = 14;
	public static readonly Dot = 15;
	public static readonly Ellipsis = 16;
	public static readonly Equal = 17;
	public static readonly NotEqual = 18;
	public static readonly LessThan = 19;
	public static readonly MoreThan = 20;
	public static readonly LessThanEquals = 21;
	public static readonly GreaterThanEquals = 22;
	public static readonly And = 23;
	public static readonly Or = 24;
	public static readonly Sql = 25;
	public static readonly OpenForm = 26;
	public static readonly SaveForm = 27;
	public static readonly Selected = 28;
	public static readonly If = 29;
	public static readonly StringLiteral = 30;
	public static readonly StringDotLiteral = 31;
	public static readonly BooleanLiteral = 32;
	public static readonly DecimalLiteral = 33;
	public static readonly ParamLiteral = 34;
	public static readonly Decimal = 35;
	public static readonly Natural = 36;
	public static readonly NonZeroDigit = 37;
	public static readonly DigitChar = 38;
	public static readonly WS = 39;
	public static readonly COMMENT = 40;
	public static readonly WHITESPACE = 41;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Plus", "Minus", "Multiply", "Divide", 
		"Assign", "Dot", "Ellipsis", "Equal", "NotEqual", "LessThan", "MoreThan", 
		"LessThanEquals", "GreaterThanEquals", "And", "Or", "Sql", "OpenForm", 
		"SaveForm", "Selected", "If", "StringLiteral", "StringDotLiteral", "BooleanLiteral", 
		"DecimalLiteral", "ParamLiteral", "Decimal", "Natural", "NonZeroDigit", 
		"DigitChar", "WS", "COMMENT", "WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'-1'", "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "','", 
		"'+'", "'-'", "'*'", "'/'", "'='", "'.'", "'...'", "'=='", "'!='", "'<'", 
		"'>'", "'<='", "'>='", "'&&'", "'||'", "'#'", "'OpenForm'", "'SaveForm'", 
		undefined, "'if'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", 
		"OpenBrace", "CloseBrace", "SemiColon", "Comma", "Plus", "Minus", "Multiply", 
		"Divide", "Assign", "Dot", "Ellipsis", "Equal", "NotEqual", "LessThan", 
		"MoreThan", "LessThanEquals", "GreaterThanEquals", "And", "Or", "Sql", 
		"OpenForm", "SaveForm", "Selected", "If", "StringLiteral", "StringDotLiteral", 
		"BooleanLiteral", "DecimalLiteral", "ParamLiteral", "Decimal", "Natural", 
		"NonZeroDigit", "DigitChar", "WS", "COMMENT", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(kacoLexer._LITERAL_NAMES, kacoLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return kacoLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(kacoLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "kaco.g4"; }

	// @Override
	public get ruleNames(): string[] { return kacoLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return kacoLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return kacoLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return kacoLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\u0126\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x03" +
		"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v" +
		"\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16" +
		"\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19" +
		"\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x05\x1D\xB3\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x07\x1F\xBA" +
		"\n\x1F\f\x1F\x0E\x1F\xBD\v\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x05 \xC4" +
		"\n \x03 \x03 \x07 \xC8\n \f \x0E \xCB\v \x03!\x03!\x03!\x03!\x03!\x03" +
		"!\x03!\x03!\x03!\x05!\xD6\n!\x03\"\x03\"\x03#\x03#\x03#\x03#\x03$\x03" +
		"$\x03$\x07$\xE1\n$\f$\x0E$\xE4\v$\x03$\x05$\xE7\n$\x03$\x03$\x07$\xEB" +
		"\n$\f$\x0E$\xEE\v$\x03$\x03$\x07$\xF2\n$\f$\x0E$\xF5\v$\x03$\x05$\xF8" +
		"\n$\x05$\xFA\n$\x03%\x03%\x03%\x07%\xFF\n%\f%\x0E%\u0102\v%\x05%\u0104" +
		"\n%\x03&\x03&\x03\'\x03\'\x05\'\u010A\n\'\x03(\x06(\u010D\n(\r(\x0E(\u010E" +
		"\x03(\x03(\x03)\x03)\x03)\x03)\x07)\u0117\n)\f)\x0E)\u011A\v)\x03)\x05" +
		")\u011D\n)\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03\xBB\x02\x02+\x03" +
		"\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t" +
		"\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02" +
		"\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17" +
		"-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F" +
		"=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S" +
		"\x02+\x03\x02\b\x05\x02\f\f\x0F\x0F^^\x03\x023;\x03\x022;\x04\x02\v\f" +
		"\x0F\x0F\x04\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F\"\"\x02\u0136\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02" +
		"\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02" +
		"/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02" +
		"\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02" +
		"\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03" +
		"\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02" +
		"\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02" +
		"Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x03U\x03\x02\x02\x02\x05X\x03\x02" +
		"\x02\x02\x07Z\x03\x02\x02\x02\t\\\x03\x02\x02\x02\v^\x03\x02\x02\x02\r" +
		"`\x03\x02\x02\x02\x0Fb\x03\x02\x02\x02\x11d\x03\x02\x02\x02\x13f\x03\x02" +
		"\x02\x02\x15h\x03\x02\x02\x02\x17j\x03\x02\x02\x02\x19l\x03\x02\x02\x02" +
		"\x1Bn\x03\x02\x02\x02\x1Dp\x03\x02\x02\x02\x1Fr\x03\x02\x02\x02!t\x03" +
		"\x02\x02\x02#x\x03\x02\x02\x02%{\x03\x02\x02\x02\'~\x03\x02\x02\x02)\x80" +
		"\x03\x02\x02\x02+\x82\x03\x02\x02\x02-\x85\x03\x02\x02\x02/\x88\x03\x02" +
		"\x02\x021\x8B\x03\x02\x02\x023\x8E\x03\x02\x02\x025\x90\x03\x02\x02\x02" +
		"7\x99\x03\x02\x02\x029\xB2\x03\x02\x02\x02;\xB4\x03\x02\x02\x02=\xB7\x03" +
		"\x02\x02\x02?\xC0\x03\x02\x02\x02A\xD5\x03\x02\x02\x02C\xD7\x03\x02\x02" +
		"\x02E\xD9\x03\x02\x02\x02G\xF9\x03\x02\x02\x02I\u0103\x03\x02\x02\x02" +
		"K\u0105\x03\x02\x02\x02M\u0109\x03\x02\x02\x02O\u010C\x03\x02\x02\x02" +
		"Q\u0112\x03\x02\x02\x02S\u0122\x03\x02\x02\x02UV\x07/\x02\x02VW\x073\x02" +
		"\x02W\x04\x03\x02\x02\x02XY\x07]\x02\x02Y\x06\x03\x02\x02\x02Z[\x07_\x02" +
		"\x02[\b\x03\x02\x02\x02\\]\x07*\x02\x02]\n\x03\x02\x02\x02^_\x07+\x02" +
		"\x02_\f\x03\x02\x02\x02`a\x07}\x02\x02a\x0E\x03\x02\x02\x02bc\x07\x7F" +
		"\x02\x02c\x10\x03\x02\x02\x02de\x07=\x02\x02e\x12\x03\x02\x02\x02fg\x07" +
		".\x02\x02g\x14\x03\x02\x02\x02hi\x07-\x02\x02i\x16\x03\x02\x02\x02jk\x07" +
		"/\x02\x02k\x18\x03\x02\x02\x02lm\x07,\x02\x02m\x1A\x03\x02\x02\x02no\x07" +
		"1\x02\x02o\x1C\x03\x02\x02\x02pq\x07?\x02\x02q\x1E\x03\x02\x02\x02rs\x07" +
		"0\x02\x02s \x03\x02\x02\x02tu\x070\x02\x02uv\x070\x02\x02vw\x070\x02\x02" +
		"w\"\x03\x02\x02\x02xy\x07?\x02\x02yz\x07?\x02\x02z$\x03\x02\x02\x02{|" +
		"\x07#\x02\x02|}\x07?\x02\x02}&\x03\x02\x02\x02~\x7F\x07>\x02\x02\x7F(" +
		"\x03\x02\x02\x02\x80\x81\x07@\x02\x02\x81*\x03\x02\x02\x02\x82\x83\x07" +
		">\x02\x02\x83\x84\x07?\x02\x02\x84,\x03\x02\x02\x02\x85\x86\x07@\x02\x02" +
		"\x86\x87\x07?\x02\x02\x87.\x03\x02\x02\x02\x88\x89\x07(\x02\x02\x89\x8A" +
		"\x07(\x02\x02\x8A0\x03\x02\x02\x02\x8B\x8C\x07~\x02\x02\x8C\x8D\x07~\x02" +
		"\x02\x8D2\x03\x02\x02\x02\x8E\x8F\x07%\x02\x02\x8F4\x03\x02\x02\x02\x90" +
		"\x91\x07Q\x02\x02\x91\x92\x07r\x02\x02\x92\x93\x07g\x02\x02\x93\x94\x07" +
		"p\x02\x02\x94\x95\x07H\x02\x02\x95\x96\x07q\x02\x02\x96\x97\x07t\x02\x02" +
		"\x97\x98\x07o\x02\x02\x986\x03\x02\x02\x02\x99\x9A\x07U\x02\x02\x9A\x9B" +
		"\x07c\x02\x02\x9B\x9C\x07x\x02\x02\x9C\x9D\x07g\x02\x02\x9D\x9E\x07H\x02" +
		"\x02\x9E\x9F\x07q\x02\x02\x9F\xA0\x07t\x02\x02\xA0\xA1\x07o\x02\x02\xA1" +
		"8\x03\x02\x02\x02\xA2\xA3\x07u\x02\x02\xA3\xA4\x07g\x02\x02\xA4\xA5\x07" +
		"n\x02\x02\xA5\xA6\x07g\x02\x02\xA6\xA7\x07e\x02\x02\xA7\xA8\x07v\x02\x02" +
		"\xA8\xA9\x07g\x02\x02\xA9\xB3\x07f\x02\x02\xAA\xAB\x07U\x02\x02\xAB\xAC" +
		"\x07G\x02\x02\xAC\xAD\x07N\x02\x02\xAD\xAE\x07G\x02\x02\xAE\xAF\x07E\x02" +
		"\x02\xAF\xB0\x07V\x02\x02\xB0\xB1\x07G\x02\x02\xB1\xB3\x07F\x02\x02\xB2" +
		"\xA2\x03\x02\x02\x02\xB2\xAA\x03\x02\x02\x02\xB3:\x03\x02\x02\x02\xB4" +
		"\xB5\x07k\x02\x02\xB5\xB6\x07h\x02\x02\xB6<\x03\x02\x02\x02\xB7\xBB\x07" +
		")\x02\x02\xB8\xBA\n\x02\x02\x02\xB9\xB8\x03\x02\x02\x02\xBA\xBD\x03\x02" +
		"\x02\x02\xBB\xBC\x03\x02\x02\x02\xBB\xB9\x03\x02\x02\x02\xBC\xBE\x03\x02" +
		"\x02\x02\xBD\xBB\x03\x02\x02\x02\xBE\xBF\x07)\x02\x02\xBF>\x03\x02\x02" +
		"\x02\xC0\xC3\x05=\x1F\x02\xC1\xC2\x070\x02\x02\xC2\xC4\x05=\x1F\x02\xC3" +
		"\xC1\x03\x02\x02\x02\xC3\xC4\x03\x02\x02\x02\xC4\xC9\x03\x02\x02\x02\xC5" +
		"\xC6\x07.\x02\x02\xC6\xC8\x05=\x1F\x02\xC7\xC5\x03\x02\x02\x02\xC8\xCB" +
		"\x03\x02\x02\x02\xC9\xC7\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA@" +
		"\x03\x02\x02\x02\xCB\xC9\x03\x02\x02\x02\xCC\xCD\x07v\x02\x02\xCD\xCE" +
		"\x07t\x02\x02\xCE\xCF\x07w\x02\x02\xCF\xD6\x07g\x02\x02\xD0\xD1\x07h\x02" +
		"\x02\xD1\xD2\x07c\x02\x02\xD2\xD3\x07n\x02\x02\xD3\xD4\x07u\x02\x02\xD4" +
		"\xD6\x07g\x02\x02\xD5\xCC\x03\x02\x02\x02\xD5\xD0\x03\x02\x02\x02\xD6" +
		"B\x03\x02\x02\x02\xD7\xD8\x05G$\x02\xD8D\x03\x02\x02\x02\xD9\xDA\x07B" +
		"\x02\x02\xDA\xDB\x05S*\x02\xDB\xDC\x05I%\x02\xDCF\x03\x02\x02\x02\xDD" +
		"\xE6\x072\x02\x02\xDE\xE2\x070\x02\x02\xDF\xE1\x05M\'\x02\xE0\xDF\x03" +
		"\x02\x02\x02\xE1\xE4\x03\x02\x02\x02\xE2\xE0\x03\x02\x02\x02\xE2\xE3\x03" +
		"\x02\x02\x02\xE3\xE5\x03\x02\x02\x02\xE4\xE2\x03\x02\x02\x02\xE5\xE7\x05" +
		"K&\x02\xE6\xDE\x03\x02\x02\x02\xE6\xE7\x03\x02\x02\x02\xE7\xFA\x03\x02" +
		"\x02\x02\xE8\xEC\x05K&\x02\xE9\xEB\x05M\'\x02\xEA\xE9\x03\x02\x02\x02" +
		"\xEB\xEE\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xEC\xED\x03\x02\x02\x02" +
		"\xED\xF7\x03\x02\x02\x02\xEE\xEC\x03\x02\x02\x02\xEF\xF3\x070\x02\x02" +
		"\xF0\xF2\x05M\'\x02\xF1\xF0\x03\x02\x02\x02\xF2\xF5\x03\x02\x02\x02\xF3" +
		"\xF1\x03\x02\x02\x02\xF3\xF4\x03\x02\x02\x02\xF4\xF6\x03\x02\x02\x02\xF5" +
		"\xF3\x03\x02\x02\x02\xF6\xF8\x05K&\x02\xF7\xEF\x03\x02\x02\x02\xF7\xF8" +
		"\x03\x02\x02\x02\xF8\xFA\x03\x02\x02\x02\xF9\xDD\x03\x02\x02\x02\xF9\xE8" +
		"\x03\x02\x02\x02\xFAH\x03\x02\x02\x02\xFB\u0104\x072\x02\x02\xFC\u0100" +
		"\t\x03\x02\x02\xFD\xFF\t\x04\x02\x02\xFE\xFD\x03\x02\x02\x02\xFF\u0102" +
		"\x03\x02\x02\x02\u0100\xFE\x03\x02\x02\x02\u0100\u0101\x03\x02\x02\x02" +
		"\u0101\u0104\x03\x02\x02\x02\u0102\u0100\x03\x02\x02\x02\u0103\xFB\x03" +
		"\x02\x02\x02\u0103\xFC\x03\x02\x02\x02\u0104J\x03\x02\x02\x02\u0105\u0106" +
		"\x043;\x02\u0106L\x03\x02\x02\x02\u0107\u010A\x05I%\x02\u0108\u010A\x07" +
		"a\x02\x02\u0109\u0107\x03\x02\x02\x02\u0109\u0108\x03\x02\x02\x02\u010A" +
		"N\x03\x02\x02\x02\u010B\u010D\t\x05\x02\x02\u010C\u010B\x03\x02\x02\x02" +
		"\u010D\u010E\x03\x02\x02\x02\u010E\u010C\x03\x02\x02\x02\u010E\u010F\x03" +
		"\x02\x02\x02\u010F\u0110\x03\x02\x02\x02\u0110\u0111\b(\x02\x02\u0111" +
		"P\x03\x02\x02\x02\u0112\u0113\x071\x02\x02\u0113\u0114\x071\x02\x02\u0114" +
		"\u0118\x03\x02\x02\x02\u0115\u0117\n\x06\x02\x02\u0116\u0115\x03\x02\x02" +
		"\x02\u0117\u011A\x03\x02\x02\x02\u0118\u0116\x03\x02\x02\x02\u0118\u0119" +
		"\x03\x02\x02\x02\u0119\u011C\x03\x02\x02\x02\u011A\u0118\x03\x02\x02\x02" +
		"\u011B\u011D\x07\x0F\x02\x02\u011C\u011B\x03\x02\x02\x02\u011C\u011D\x03" +
		"\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011E\u011F\x07\f\x02\x02\u011F" +
		"\u0120\x03\x02\x02\x02\u0120\u0121\b)\x02\x02\u0121R\x03\x02\x02\x02\u0122" +
		"\u0123\t\x07\x02\x02\u0123\u0124\x03\x02\x02\x02\u0124\u0125\b*\x02\x02" +
		"\u0125T\x03\x02\x02\x02\x14\x02\xB2\xBB\xC3\xC9\xD5\xE2\xE6\xEC\xF3\xF7" +
		"\xF9\u0100\u0103\u0109\u010E\u0118\u011C\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!kacoLexer.__ATN) {
			kacoLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(kacoLexer._serializedATN));
		}

		return kacoLexer.__ATN;
	}

}

