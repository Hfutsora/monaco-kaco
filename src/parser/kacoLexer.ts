// Generated from src/parser/kaco.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';

export class kacoLexer extends Lexer {
  public static readonly T__0 = 1;
  public static readonly T__1 = 2;
  public static readonly T__2 = 3;
  public static readonly T__3 = 4;
  public static readonly T__4 = 5;
  public static readonly T__5 = 6;
  public static readonly T__6 = 7;
  public static readonly T__7 = 8;
  public static readonly T__8 = 9;
  public static readonly T__9 = 10;
  public static readonly T__10 = 11;
  public static readonly T__11 = 12;
  public static readonly T__12 = 13;
  public static readonly T__13 = 14;
  public static readonly T__14 = 15;
  public static readonly T__15 = 16;
  public static readonly T__16 = 17;
  public static readonly T__17 = 18;
  public static readonly OpenBracket = 19;
  public static readonly CloseBracket = 20;
  public static readonly OpenParen = 21;
  public static readonly CloseParen = 22;
  public static readonly SemiColon = 23;
  public static readonly Comma = 24;
  public static readonly Assign = 25;
  public static readonly Dot = 26;
  public static readonly Ellipsis = 27;
  public static readonly OpenForm = 28;
  public static readonly StringLiteral = 29;
  public static readonly StringDotLiteral = 30;
  public static readonly BooleanLiteral = 31;
  public static readonly DecimalLiteral = 32;
  public static readonly Decimal = 33;
  public static readonly LineComment = 34;
  public static readonly WhiteSpace = 35;

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = [
    'DEFAULT_TOKEN_CHANNEL', 'HIDDEN'
  ];

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = [
    'DEFAULT_MODE'
  ];

  public static readonly ruleNames: string[] = [
    'T__0', 'T__1', 'T__2', 'T__3', 'T__4', 'T__5', 'T__6', 'T__7', 'T__8',
    'T__9', 'T__10', 'T__11', 'T__12', 'T__13', 'T__14', 'T__15', 'T__16',
    'T__17', 'OpenBracket', 'CloseBracket', 'OpenParen', 'CloseParen', 'SemiColon',
    'Comma', 'Assign', 'Dot', 'Ellipsis', 'OpenForm', 'StringLiteral', 'StringDotLiteral',
    'BooleanLiteral', 'DecimalLiteral', 'Decimal', 'NonZeroDigit', 'DigitChar',
    'LineComment', 'WhiteSpace'
  ];

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined, '\'if\'', '\'else\'', '\'{\'', '\'}\'', '\'print\'', '\'||\'', '\'&&\'',
    '\'==\'', '\'!=\'', '\'<\'', '\'<=\'', '\'>\'', '\'>=\'', '\'+\'', '\'-\'', '\'*\'', '\'/\'',
    '\'!\'', '\'[\'', '\']\'', '\'(\'', '\')\'', '\';\'', '\',\'', '\'=\'', '\'.\'', '\'...\'',
    '\'OpenForm\''
  ];
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, undefined, undefined,
    undefined, undefined, undefined, undefined, undefined, 'OpenBracket',
    'CloseBracket', 'OpenParen', 'CloseParen', 'SemiColon', 'Comma', 'Assign',
    'Dot', 'Ellipsis', 'OpenForm', 'StringLiteral', 'StringDotLiteral', 'BooleanLiteral',
    'DecimalLiteral', 'Decimal', 'LineComment', 'WhiteSpace'
  ];
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(kacoLexer._LITERAL_NAMES, kacoLexer._SYMBOLIC_NAMES, []);

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return kacoLexer.VOCABULARY;
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input);
    this._interp = new LexerATNSimulator(kacoLexer._ATN, this);
  }

  // @Override
  public get grammarFileName(): string { return 'kaco.g4'; }

  // @Override
  public get ruleNames(): string[] { return kacoLexer.ruleNames; }

  // @Override
  public get serializedATN(): string { return kacoLexer._serializedATN; }

  // @Override
  public get channelNames(): string[] { return kacoLexer.channelNames; }

  // @Override
  public get modeNames(): string[] { return kacoLexer.modeNames; }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02%\xF3\b\x01\x04' +
		'\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04' +
		'\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r' +
		'\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12' +
		'\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17' +
		'\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C' +
		'\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t"\x04' +
		'#\t#\x04$\t$\x04%\t%\x04&\t&\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03' +
		'\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03' +
		'\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b' +
		'\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03' +
		'\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11' +
		'\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15' +
		'\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A' +
		'\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D' +
		'\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E' +
		'\x07\x1E\x9F\n\x1E\f\x1E\x0E\x1E\xA2\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03' +
		'\x1F\x03\x1F\x07\x1F\xA9\n\x1F\f\x1F\x0E\x1F\xAC\v\x1F\x03 \x03 \x03 ' +
		'\x03 \x03 \x03 \x03 \x03 \x03 \x05 \xB7\n \x03!\x03!\x03"\x03"\x03"' +
		'\x07"\xBE\n"\f"\x0E"\xC1\v"\x03"\x05"\xC4\n"\x03"\x03"\x07"' +
		'\xC8\n"\f"\x0E"\xCB\v"\x03"\x03"\x07"\xCF\n"\f"\x0E"\xD2\v"' +
		'\x03"\x05"\xD5\n"\x05"\xD7\n"\x03#\x03#\x03$\x03$\x03$\x05$\xDE\n' +
		'$\x03%\x03%\x03%\x03%\x07%\xE4\n%\f%\x0E%\xE7\v%\x03%\x05%\xEA\n%\x03' +
		'%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x03\xA0\x02\x02\'\x03\x02\x03\x05' +
		'\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13' +
		'\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02' +
		'\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/' +
		'\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?' +
		'\x02!A\x02"C\x02#E\x02\x02G\x02\x02I\x02$K\x02%\x03\x02\x05\x05\x02\f' +
		'\f\x0F\x0F^^\x04\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F""\x02\xFD\x02\x03' +
		'\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t' +
		'\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03' +
		'\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03' +
		'\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03' +
		'\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03' +
		'\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02' +
		'\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02' +
		'/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02' +
		'\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02' +
		'\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03' +
		'\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x03M\x03\x02\x02' +
		'\x02\x05P\x03\x02\x02\x02\x07U\x03\x02\x02\x02\tW\x03\x02\x02\x02\vY\x03' +
		'\x02\x02\x02\r_\x03\x02\x02\x02\x0Fb\x03\x02\x02\x02\x11e\x03\x02\x02' +
		'\x02\x13h\x03\x02\x02\x02\x15k\x03\x02\x02\x02\x17m\x03\x02\x02\x02\x19' +
		'p\x03\x02\x02\x02\x1Br\x03\x02\x02\x02\x1Du\x03\x02\x02\x02\x1Fw\x03\x02' +
		'\x02\x02!y\x03\x02\x02\x02#{\x03\x02\x02\x02%}\x03\x02\x02\x02\'\x7F\x03' +
		'\x02\x02\x02)\x81\x03\x02\x02\x02+\x83\x03\x02\x02\x02-\x85\x03\x02\x02' +
		'\x02/\x87\x03\x02\x02\x021\x89\x03\x02\x02\x023\x8B\x03\x02\x02\x025\x8D' +
		'\x03\x02\x02\x027\x8F\x03\x02\x02\x029\x93\x03\x02\x02\x02;\x9C\x03\x02' +
		'\x02\x02=\xA5\x03\x02\x02\x02?\xB6\x03\x02\x02\x02A\xB8\x03\x02\x02\x02' +
		'C\xD6\x03\x02\x02\x02E\xD8\x03\x02\x02\x02G\xDD\x03\x02\x02\x02I\xDF\x03' +
		'\x02\x02\x02K\xEF\x03\x02\x02\x02MN\x07k\x02\x02NO\x07h\x02\x02O\x04\x03' +
		'\x02\x02\x02PQ\x07g\x02\x02QR\x07n\x02\x02RS\x07u\x02\x02ST\x07g\x02\x02' +
		'T\x06\x03\x02\x02\x02UV\x07}\x02\x02V\b\x03\x02\x02\x02WX\x07\x7F\x02' +
		'\x02X\n\x03\x02\x02\x02YZ\x07r\x02\x02Z[\x07t\x02\x02[\\\x07k\x02\x02' +
		'\\]\x07p\x02\x02]^\x07v\x02\x02^\f\x03\x02\x02\x02_`\x07~\x02\x02`a\x07' +
		'~\x02\x02a\x0E\x03\x02\x02\x02bc\x07(\x02\x02cd\x07(\x02\x02d\x10\x03' +
		'\x02\x02\x02ef\x07?\x02\x02fg\x07?\x02\x02g\x12\x03\x02\x02\x02hi\x07' +
		'#\x02\x02ij\x07?\x02\x02j\x14\x03\x02\x02\x02kl\x07>\x02\x02l\x16\x03' +
		'\x02\x02\x02mn\x07>\x02\x02no\x07?\x02\x02o\x18\x03\x02\x02\x02pq\x07' +
		'@\x02\x02q\x1A\x03\x02\x02\x02rs\x07@\x02\x02st\x07?\x02\x02t\x1C\x03' +
		'\x02\x02\x02uv\x07-\x02\x02v\x1E\x03\x02\x02\x02wx\x07/\x02\x02x \x03' +
		'\x02\x02\x02yz\x07,\x02\x02z"\x03\x02\x02\x02{|\x071\x02\x02|$\x03\x02' +
		'\x02\x02}~\x07#\x02\x02~&\x03\x02\x02\x02\x7F\x80\x07]\x02\x02\x80(\x03' +
		'\x02\x02\x02\x81\x82\x07_\x02\x02\x82*\x03\x02\x02\x02\x83\x84\x07*\x02' +
		'\x02\x84,\x03\x02\x02\x02\x85\x86\x07+\x02\x02\x86.\x03\x02\x02\x02\x87' +
		'\x88\x07=\x02\x02\x880\x03\x02\x02\x02\x89\x8A\x07.\x02\x02\x8A2\x03\x02' +
		'\x02\x02\x8B\x8C\x07?\x02\x02\x8C4\x03\x02\x02\x02\x8D\x8E\x070\x02\x02' +
		'\x8E6\x03\x02\x02\x02\x8F\x90\x070\x02\x02\x90\x91\x070\x02\x02\x91\x92' +
		'\x070\x02\x02\x928\x03\x02\x02\x02\x93\x94\x07Q\x02\x02\x94\x95\x07r\x02' +
		'\x02\x95\x96\x07g\x02\x02\x96\x97\x07p\x02\x02\x97\x98\x07H\x02\x02\x98' +
		'\x99\x07q\x02\x02\x99\x9A\x07t\x02\x02\x9A\x9B\x07o\x02\x02\x9B:\x03\x02' +
		'\x02\x02\x9C\xA0\x07)\x02\x02\x9D\x9F\n\x02\x02\x02\x9E\x9D\x03\x02\x02' +
		'\x02\x9F\xA2\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA0\x9E\x03\x02\x02' +
		'\x02\xA1\xA3\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA3\xA4\x07)\x02' +
		'\x02\xA4<\x03\x02\x02\x02\xA5\xAA\x05;\x1E\x02\xA6\xA7\x070\x02\x02\xA7' +
		'\xA9\x05;\x1E\x02\xA8\xA6\x03\x02\x02\x02\xA9\xAC\x03\x02\x02\x02\xAA' +
		'\xA8\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAB>\x03\x02\x02\x02\xAC' +
		'\xAA\x03\x02\x02\x02\xAD\xAE\x07v\x02\x02\xAE\xAF\x07t\x02\x02\xAF\xB0' +
		'\x07w\x02\x02\xB0\xB7\x07g\x02\x02\xB1\xB2\x07h\x02\x02\xB2\xB3\x07c\x02' +
		'\x02\xB3\xB4\x07n\x02\x02\xB4\xB5\x07u\x02\x02\xB5\xB7\x07g\x02\x02\xB6' +
		'\xAD\x03\x02\x02\x02\xB6\xB1\x03\x02\x02\x02\xB7@\x03\x02\x02\x02\xB8' +
		'\xB9\x05C"\x02\xB9B\x03\x02\x02\x02\xBA\xC3\x072\x02\x02\xBB\xBF\x07' +
		'0\x02\x02\xBC\xBE\x05G$\x02\xBD\xBC\x03\x02\x02\x02\xBE\xC1\x03\x02\x02' +
		'\x02\xBF\xBD\x03\x02\x02\x02\xBF\xC0\x03\x02\x02\x02\xC0\xC2\x03\x02\x02' +
		'\x02\xC1\xBF\x03\x02\x02\x02\xC2\xC4\x05E#\x02\xC3\xBB\x03\x02\x02\x02' +
		'\xC3\xC4\x03\x02\x02\x02\xC4\xD7\x03\x02\x02\x02\xC5\xC9\x05E#\x02\xC6' +
		'\xC8\x05G$\x02\xC7\xC6\x03\x02\x02\x02\xC8\xCB\x03\x02\x02\x02\xC9\xC7' +
		'\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xD4\x03\x02\x02\x02\xCB\xC9' +
		'\x03\x02\x02\x02\xCC\xD0\x070\x02\x02\xCD\xCF\x05G$\x02\xCE\xCD\x03\x02' +
		'\x02\x02\xCF\xD2\x03\x02\x02\x02\xD0\xCE\x03\x02\x02\x02\xD0\xD1\x03\x02' +
		'\x02\x02\xD1\xD3\x03\x02\x02\x02\xD2\xD0\x03\x02\x02\x02\xD3\xD5\x05E' +
		'#\x02\xD4\xCC\x03\x02\x02\x02\xD4\xD5\x03\x02\x02\x02\xD5\xD7\x03\x02' +
		'\x02\x02\xD6\xBA\x03\x02\x02\x02\xD6\xC5\x03\x02\x02\x02\xD7D\x03\x02' +
		'\x02\x02\xD8\xD9\x043;\x02\xD9F\x03\x02\x02\x02\xDA\xDE\x072\x02\x02\xDB' +
		'\xDE\x05E#\x02\xDC\xDE\x07a\x02\x02\xDD\xDA\x03\x02\x02\x02\xDD\xDB\x03' +
		'\x02\x02\x02\xDD\xDC\x03\x02\x02\x02\xDEH\x03\x02\x02\x02\xDF\xE0\x07' +
		'1\x02\x02\xE0\xE1\x071\x02\x02\xE1\xE5\x03\x02\x02\x02\xE2\xE4\n\x03\x02' +
		'\x02\xE3\xE2\x03\x02\x02\x02\xE4\xE7\x03\x02\x02\x02\xE5\xE3\x03\x02\x02' +
		'\x02\xE5\xE6\x03\x02\x02\x02\xE6\xE9\x03\x02\x02\x02\xE7\xE5\x03\x02\x02' +
		'\x02\xE8\xEA\x07\x0F\x02\x02\xE9\xE8\x03\x02\x02\x02\xE9\xEA\x03\x02\x02' +
		'\x02\xEA\xEB\x03\x02\x02\x02\xEB\xEC\x07\f\x02\x02\xEC\xED\x03\x02\x02' +
		'\x02\xED\xEE\b%\x02\x02\xEEJ\x03\x02\x02\x02\xEF\xF0\t\x04\x02\x02\xF0' +
		'\xF1\x03\x02\x02\x02\xF1\xF2\b&\x02\x02\xF2L\x03\x02\x02\x02\x0F\x02\xA0' +
		'\xAA\xB6\xBF\xC3\xC9\xD0\xD4\xD6\xDD\xE5\xE9\x03\b\x02\x02';
  public static __ATN: ATN;
  public static get _ATN(): ATN {
    if (!kacoLexer.__ATN) {
      kacoLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(kacoLexer._serializedATN));
    }

    return kacoLexer.__ATN;
  }

}

